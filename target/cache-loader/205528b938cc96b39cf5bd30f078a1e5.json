{"remainingRequest":"/home/ciro/jhipster/eserciziojpa-master/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/ciro/jhipster/eserciziojpa-master/node_modules/ts-loader/index.js??ref--9-3!/home/ciro/jhipster/eserciziojpa-master/node_modules/eslint-loader/dist/cjs.js!/home/ciro/jhipster/eserciziojpa-master/src/main/webapp/app/entities/ordine/ordine.service.ts","dependencies":[{"path":"/home/ciro/jhipster/eserciziojpa-master/src/main/webapp/app/entities/ordine/ordine.service.ts","mtime":1583829455000},{"path":"/home/ciro/jhipster/eserciziojpa-master/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/ciro/jhipster/eserciziojpa-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ciro/jhipster/eserciziojpa-master/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ciro/jhipster/eserciziojpa-master/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/home/ciro/jhipster/eserciziojpa-master/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CnZhciBfYTsKaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnOwppbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnOwppbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7CmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnOwppbXBvcnQgeyBTRVJWRVJfQVBJX1VSTCB9IGZyb20gJ2FwcC9hcHAuY29uc3RhbnRzJzsKaW1wb3J0IHsgY3JlYXRlUmVxdWVzdE9wdGlvbiB9IGZyb20gJ2FwcC9zaGFyZWQvdXRpbC9yZXF1ZXN0LXV0aWwnOwpsZXQgT3JkaW5lU2VydmljZSA9IGNsYXNzIE9yZGluZVNlcnZpY2UgewogICAgY29uc3RydWN0b3IoaHR0cCkgewogICAgICAgIHRoaXMuaHR0cCA9IGh0dHA7CiAgICAgICAgdGhpcy5yZXNvdXJjZVVybCA9IFNFUlZFUl9BUElfVVJMICsgJ2FwaS9vcmRpbmVzJzsKICAgIH0KICAgIGNyZWF0ZShvcmRpbmUpIHsKICAgICAgICBjb25zdCBjb3B5ID0gdGhpcy5jb252ZXJ0RGF0ZUZyb21DbGllbnQob3JkaW5lKTsKICAgICAgICByZXR1cm4gdGhpcy5odHRwCiAgICAgICAgICAgIC5wb3N0KHRoaXMucmVzb3VyY2VVcmwsIGNvcHksIHsgb2JzZXJ2ZTogJ3Jlc3BvbnNlJyB9KQogICAgICAgICAgICAucGlwZShtYXAoKHJlcykgPT4gdGhpcy5jb252ZXJ0RGF0ZUZyb21TZXJ2ZXIocmVzKSkpOwogICAgfQogICAgdXBkYXRlKG9yZGluZSkgewogICAgICAgIGNvbnN0IGNvcHkgPSB0aGlzLmNvbnZlcnREYXRlRnJvbUNsaWVudChvcmRpbmUpOwogICAgICAgIHJldHVybiB0aGlzLmh0dHAKICAgICAgICAgICAgLnB1dCh0aGlzLnJlc291cmNlVXJsLCBjb3B5LCB7IG9ic2VydmU6ICdyZXNwb25zZScgfSkKICAgICAgICAgICAgLnBpcGUobWFwKChyZXMpID0+IHRoaXMuY29udmVydERhdGVGcm9tU2VydmVyKHJlcykpKTsKICAgIH0KICAgIGZpbmQoaWQpIHsKICAgICAgICByZXR1cm4gdGhpcy5odHRwCiAgICAgICAgICAgIC5nZXQoYCR7dGhpcy5yZXNvdXJjZVVybH0vJHtpZH1gLCB7IG9ic2VydmU6ICdyZXNwb25zZScgfSkKICAgICAgICAgICAgLnBpcGUobWFwKChyZXMpID0+IHRoaXMuY29udmVydERhdGVGcm9tU2VydmVyKHJlcykpKTsKICAgIH0KICAgIHF1ZXJ5KHJlcSkgewogICAgICAgIGNvbnN0IG9wdGlvbnMgPSBjcmVhdGVSZXF1ZXN0T3B0aW9uKHJlcSk7CiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cAogICAgICAgICAgICAuZ2V0KHRoaXMucmVzb3VyY2VVcmwsIHsgcGFyYW1zOiBvcHRpb25zLCBvYnNlcnZlOiAncmVzcG9uc2UnIH0pCiAgICAgICAgICAgIC5waXBlKG1hcCgocmVzKSA9PiB0aGlzLmNvbnZlcnREYXRlQXJyYXlGcm9tU2VydmVyKHJlcykpKTsKICAgIH0KICAgIGRlbGV0ZShpZCkgewogICAgICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKGAke3RoaXMucmVzb3VyY2VVcmx9LyR7aWR9YCwgeyBvYnNlcnZlOiAncmVzcG9uc2UnIH0pOwogICAgfQogICAgY29udmVydERhdGVGcm9tQ2xpZW50KG9yZGluZSkgewogICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuYXNzaWduKHt9LCBvcmRpbmUsIHsKICAgICAgICAgICAgZGF0YTogb3JkaW5lLmRhdGEgJiYgb3JkaW5lLmRhdGEuaXNWYWxpZCgpID8gb3JkaW5lLmRhdGEudG9KU09OKCkgOiB1bmRlZmluZWQKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gY29weTsKICAgIH0KICAgIGNvbnZlcnREYXRlRnJvbVNlcnZlcihyZXMpIHsKICAgICAgICBpZiAocmVzLmJvZHkpIHsKICAgICAgICAgICAgcmVzLmJvZHkuZGF0YSA9IHJlcy5ib2R5LmRhdGEgPyBtb21lbnQocmVzLmJvZHkuZGF0YSkgOiB1bmRlZmluZWQ7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXM7CiAgICB9CiAgICBjb252ZXJ0RGF0ZUFycmF5RnJvbVNlcnZlcihyZXMpIHsKICAgICAgICBpZiAocmVzLmJvZHkpIHsKICAgICAgICAgICAgcmVzLmJvZHkuZm9yRWFjaCgob3JkaW5lKSA9PiB7CiAgICAgICAgICAgICAgICBvcmRpbmUuZGF0YSA9IG9yZGluZS5kYXRhID8gbW9tZW50KG9yZGluZS5kYXRhKSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXM7CiAgICB9Cn07Ck9yZGluZVNlcnZpY2UgPSB0c2xpYl8xLl9fZGVjb3JhdGUoWwogICAgSW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KSwKICAgIHRzbGliXzEuX19tZXRhZGF0YSgiZGVzaWduOnBhcmFtdHlwZXMiLCBbdHlwZW9mIChfYSA9IHR5cGVvZiBIdHRwQ2xpZW50ICE9PSAidW5kZWZpbmVkIiAmJiBIdHRwQ2xpZW50KSA9PT0gImZ1bmN0aW9uIiA/IF9hIDogT2JqZWN0XSkKXSwgT3JkaW5lU2VydmljZSk7CmV4cG9ydCB7IE9yZGluZVNlcnZpY2UgfTsK"},{"version":3,"file":"/home/ciro/jhipster/eserciziojpa-master/src/main/webapp/app/entities/ordine/ordine.service.ts","sourceRoot":"","sources":["/home/ciro/jhipster/eserciziojpa-master/node_modules/eslint-loader/dist/cjs.js!/home/ciro/jhipster/eserciziojpa-master/src/main/webapp/app/entities/ordine/ordine.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as moment from 'moment';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { DATE_FORMAT } from 'app/shared/constants/input.constants';\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { createRequestOption } from 'app/shared/util/request-util';\nimport { IOrdine } from 'app/shared/model/ordine.model';\n\ntype EntityResponseType = HttpResponse<IOrdine>;\ntype EntityArrayResponseType = HttpResponse<IOrdine[]>;\n\n@Injectable({ providedIn: 'root' })\nexport class OrdineService {\n  public resourceUrl = SERVER_API_URL + 'api/ordines';\n\n  constructor(protected http: HttpClient) {}\n\n  create(ordine: IOrdine): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(ordine);\n    return this.http\n      .post<IOrdine>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  update(ordine: IOrdine): Observable<EntityResponseType> {\n    const copy = this.convertDateFromClient(ordine);\n    return this.http\n      .put<IOrdine>(this.resourceUrl, copy, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  find(id: number): Observable<EntityResponseType> {\n    return this.http\n      .get<IOrdine>(`${this.resourceUrl}/${id}`, { observe: 'response' })\n      .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n  }\n\n  query(req?: any): Observable<EntityArrayResponseType> {\n    const options = createRequestOption(req);\n    return this.http\n      .get<IOrdine[]>(this.resourceUrl, { params: options, observe: 'response' })\n      .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n  }\n\n  delete(id: number): Observable<HttpResponse<{}>> {\n    return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });\n  }\n\n  protected convertDateFromClient(ordine: IOrdine): IOrdine {\n    const copy: IOrdine = Object.assign({}, ordine, {\n      data: ordine.data && ordine.data.isValid() ? ordine.data.toJSON() : undefined\n    });\n    return copy;\n  }\n\n  protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n    if (res.body) {\n      res.body.data = res.body.data ? moment(res.body.data) : undefined;\n    }\n    return res;\n  }\n\n  protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n    if (res.body) {\n      res.body.forEach((ordine: IOrdine) => {\n        ordine.data = ordine.data ? moment(ordine.data) : undefined;\n      });\n    }\n    return res;\n  }\n}\n"]}]}